### Экзогенные параметры ###
Y_n = 100
pi_target = 2
alpha = 1
rho = 2
phi = 0.25
theta_pi = 0.5
theta_y = 0.5
### Эндогенные переменные ###
Y = rep(NA, times = 20)
pi = rep(NA, times = 20)
pi_exp = rep(NA, times = 20)
r = rep(NA, times = 20)
i = rep(NA, times = 20)
### Начальные значения ###
Y[1] = Y_n
pi[1] = pi_target
pi_exp[1] = pi_target
r[1] = rho
i[1] = rho + pi_target
### Шоки ###
epsilon = rep(NA, times = 20) # шок спроса
v = rep(NA, times = 20) # шок издержек (AS)
eta = rep(NA, times = 20) # шок ожиданий (ож. инф.)
u = rep(NA, times = 20)
### Последствия случайных шоков ###
eta[1] = 0
eta[2] = 1
eta[3:20] = 0
epsilon[1:20] = 0
v[1:20] = 0
u[1:20] = 0
left_mat = matrix(data = c(1,       0,            alpha,0,
-phi,    1,            0,    0,
0,       1,            1,    -1,
-theta_y,-(1+theta_pi),0,    1),
nrow = 4, byrow = TRUE)
for (j in 2:20) {
pi_exp[j] = pi[j-1] + eta[j-1]
right_mat = matrix(data = c((Y_n+alpha*rho+epsilon[j]),
(pi_exp[j]-phi*Y_n+v[j]),
-eta[j],
(rho-theta_pi*pi_target-theta_y*Y_n+u[j])),
nrow = 4)
sr_eq = solve(left_mat, right_mat)
Y[j] = as.numeric(sr_eq[1,])
pi[j] = sr_eq[2,]
r[j] = sr_eq[3,]
i[j] = sr_eq[4,]
}
Y=ts(data=Y, start = -1, end = 18, frequency = 1)
Y_eq = ts(data=rep(Y_n, times = 20), start = -1, end = 18, frequency = 1)
plot(Y)
lines(Y_eq, col = "red")
pi = ts(data=pi, start = -1, end = 18, frequency = 1)
pi_eq = ts(data=rep(pi_target, times = 20), start = -1, end = 18, frequency = 1)
plot(pi)
lines(pi_eq, col = "red")
r = ts(data=r, start = -1, end = 18, frequency = 1)
r_eq = ts(data=rep(rho, times = 20), start = -1, end = 18, frequency = 1)
plot(r)
lines(r_eq, col = "red")
i = ts(data=i, start = -1, end = 18, frequency = 1)
i_eq = ts(data=rep((rho+pi_target), times = 20), start = -1, end = 18, frequency = 1)
plot(i)
lines(i_eq, col = "red")
### Экзогенные параметры ###
Y_n = 100
pi_target = 2
alpha = 1
rho = 2
phi = 0.25
theta_pi = 0.5
theta_y = 0.5
### Эндогенные переменные ###
Y = rep(NA, times = 20)
pi = rep(NA, times = 20)
pi_exp = rep(NA, times = 20)
r = rep(NA, times = 20)
i = rep(NA, times = 20)
### Начальные значения ###
Y[1] = Y_n
pi[1] = pi_target
pi_exp[1] = pi_target
r[1] = rho
i[1] = rho + pi_target
### Шоки ###
epsilon = rep(NA, times = 20) # шок спроса
v = rep(NA, times = 20) # шок издержек (AS)
eta = rep(NA, times = 20) # шок ожиданий (ож. инф.)
u = rep(NA, times = 20)
### Последствия случайных шоков ###
eta[1] = 0
eta[2] = 1
eta[3:20] = 0
epsilon[1:20] = 0
v[1:20] = 0
u[1:20] = 0
left_mat = matrix(data = c(1,       0,            alpha,0,
-phi,    1,            0,    0,
0,       1,            1,    -1,
-theta_y,-(1+theta_pi),0,    1),
nrow = 4, byrow = TRUE)
pi_target1 = 1
for (j in 2:20) {
pi_exp[j] = pi[j-1] + eta[j-1]
right_mat = matrix(data = c((Y_n+alpha*rho+epsilon[j]),
(pi_exp[j]-phi*Y_n+v[j]),
-eta[j],
(rho-theta_pi*pi_target1-theta_y*Y_n+u[j])),
nrow = 4)
sr_eq = solve(left_mat, right_mat)
Y[j] = as.numeric(sr_eq[1,])
pi[j] = sr_eq[2,]
r[j] = sr_eq[3,]
i[j] = sr_eq[4,]
}
Y=ts(data=Y, start = -1, end = 18, frequency = 1)
Y_eq = ts(data=rep(Y_n, times = 20), start = -1, end = 18, frequency = 1)
plot(Y)
lines(Y_eq, col = "red")
pi = ts(data=pi, start = -1, end = 18, frequency = 1)
pi_eq = ts(data=rep(pi_target, times = 20), start = -1, end = 18, frequency = 1)
plot(pi)
lines(pi_eq, col = "red")
r = ts(data=r, start = -1, end = 18, frequency = 1)
r_eq = ts(data=rep(rho, times = 20), start = -1, end = 18, frequency = 1)
plot(r)
lines(r_eq, col = "red")
i = ts(data=i, start = -1, end = 18, frequency = 1)
i_eq = ts(data=rep((rho+pi_target), times = 20), start = -1, end = 18, frequency = 1)
plot(i)
lines(i_eq, col = "red")
library(ggplot2)
library(gMOIP)
library(lpSolve)
C <- c(1, rep(0,12))
C
A <- matrix(c(1,-1,rep(0,5),-1,rep(0,2),-1,0,-1,
0,1.015,-1,rep(0,10),
rep(0,2),1.015,-1,rep(0,3),1.035,-1,rep(0,4),
rep(0,3),1.015,-1,rep(0,5),1.06,-1,0,
rep(0,4),1.015,-1,rep(0,2),1.035,-1,rep(0,3),
rep(0,5),1.015,-1,rep(0,6),
rep(0,6),1.015,rep(0,2),1.035,0,1.06,1.11), byrow = TRUE, ncol = 13, nrow = 7)
colnames(A) <- c('y', 'A_1', 'A_2', 'A_3', 'A_4', 'A_5', 'A_6', 'B_1', 'B_3', 'B_5', 'C_1', 'C_4', 'D_1')
b <- c( rep(0,2),150,rep(0,3),600 )
A
b
C
constraints_direction <- rep('=',7)
constraints_direction
mod <- lp(direction = "min", objective.in = C,
const.mat = A, const.dir = constraints_direction, const.rhs = b,
compute.sens = TRUE)
mod$status # 0
mod$solution
# [1] 678.9254   0.0000   0.0000   0.0000   0.0000   0.0000   0.0000 144.9275   0.0000
# [10]   0.0000 533.9979 566.0377   0.0000
mod$objval # 678.9254
####
# Стоимость 1 рубля, к-рый надо выплатить в начале седьмого мес?
b1 <- c( rep(0,2),150,rep(0,3),600+0.001 )
# размерность в тыс. руб.
mod1 <- lp(direction = "min", objective.in = C,
const.mat = A, const.dir = constraints_direction, const.rhs = b1,
compute.sens = TRUE)
mod1$status # 0
mod1$solution
mod1$objval # 678.9263
mod1$objval - mod$objval # 0.0008899964 -- стоимость 1 доп. руб. в тыс. руб.
(mod1$objval - mod$objval) * 1000 # 0.8899964 -- стоимость 1 доп. руб.
####
mod$duals
mod$duals.to # [7]: 1.000000e+30 => 3-я Th двойственности выполняется
# \Delta z = 0.89 * 0.001 -- в тыс. руб.
# 1000 * \Delta z = 0.89 -- в руб.
########
b2 <- c( rep(0,2),150,0,0+0.001,0,600 )
mod2 <- lp(direction = "min", objective.in = C,
const.mat = A, const.dir = constraints_direction, const.rhs = b2,
compute.sens = TRUE)
mod2$status # 0
mod2$solution
mod2$objval # 678.9263
mod2$objval - mod$objval # 0.0009294544 -- стоимость 1 доп. руб. в тыс. руб.
(mod2$objval - mod$objval) * 1000 # 0.9294544 -- стоимость 1 доп. руб.
mod$duals
mod$duals.to # [5]: 0.000000e+00 => 3-я Th двойственности НЕ выполняется
b1
mod$duals.from
#######
mod$duals
mod$duals.from
mod$duals.to
library(lpSolve)
C <- c( rep(0,8),1 )
b <- c( 20,rep(0,3),rep(10,5) )
constraints_direction <- c( rep('=',4),rep('<=',5) )
A <- matrix( c(1,0,1,0,1,1,rep(0,3),
0.3,-1,rep(0,3),1.06,-1,rep(0,2),
1,0.3,0,-1,1.2,1.06,0,-1,0,
0,1,1.75,1.4,rep(0,3),1.06,-1,
1,rep(0,8),
0,1,rep(0,7),
rep(0,2),1,rep(0,6),
rep(0,3),1,rep(0,5),
rep(0,4),1,rep(0,4)), byrow=TRUE, ncol=9, nrow=9 )
C
b
constraints_direction
A
mod <- lp(direction='max', objective.in=C,
const.mat=A, const.dir=constraints_direction, const.rhs=b,
compute.sens=TRUE)
mod$status # 0 -- success
mod$solution
# [1]  0.0000000 10.0000000 10.0000000 10.0000000  0.5660377  9.4339623  0.0000000
# [8]  3.6792453 45.4000000
mod$objval # 45.4
b1 <- c( 20+(0.1)^6,rep(0,3),rep(10,5) )
mod1 <- lp(direction='max', objective.in=C,
const.mat=A, const.dir=constraints_direction, const.rhs=b1,
compute.sens=TRUE)
mod1$status # 0 -- success
mod1$solution
# [1]  0.0000000 10.0000000 10.0000000 10.0000000  0.56603((87))  9.4339623  0.0000000
# [8]  3.67924((65)) 45.40000((13))
mod1$objval # 45.4
####
(mod1$objval - mod$objval) * 10^6 # 1.272
#######
mod$duals
# [1] ((1.000000000)) 0.980676329 0.966183575 0.943396226 0.921146315 0.903346387 0.889996440 0.000000000
# [9]   0.004613527   0.000000000 0.008636405 0.008432716 0.004249733 0.000000000 0.000000000 0.012797138
# [17]  0.000000000   0.000000000 0.000000000 0.012103952
mod$duals.from
# [1] ((-6.789254e+02)) -1.477833e+02  2.842171e-14 -5.660377e+02 -5.797101e+02 -5.911330e+02  2.273737e-13
# [8]   -1.000000e+30    0.000000e+00 -1.000000e+30 -1.500000e+02  0.000000e+00  0.000000e+00 -1.000000e+30
# [15]  -1.000000e+30    0.000000e+00 -1.000000e+30 -1.000000e+30 -1.000000e+30 -5.609122e+04
mod$duals.to
# [1] ((1.000000e+30)) 0.000000e+00 1.000000e+30 1.000000e+30 0.000000e+00 0.000000e+00 1.000000e+30
# [8]   1.000000e+30   1.455993e+02 1.000000e+30 5.576726e+02 5.711430e+02 0.000000e+00 1.000000e+30
# [15]  1.000000e+30   5.601064e+02 1.000000e+30 1.000000e+30 1.000000e+30 5.405405e+02
## b_1 можно менять довольно сильно => 3-я Th вып-ся => \Delta z = \Delta b_1 \cdot y*_1
## = (0.1)^6 * 1.000000000 в млн руб
library(lpSolve)
C <- c(0.3,0.9)
A <- matrix(c(-0.21,0.3,
-0.03, 0.01,
1,1), ncol=2, nrow=3, byrow=TRUE)
b <- c(0,0,800)
# 800 = b_3
constraints_direction <- c('>=','<=','>=')
mod <- lp(direction = "min", objective.in = C,
const.mat = A, const.dir = constraints_direction, const.rhs = b,
compute.sens = TRUE)
mod$status # 0 -- success
mod$solution # 470.5882 329.4118
mod$objval # 437.6471
mod$duals
# y_1       y_2       y_3           ограничения двойственной задачи
# 1.1764706 0.0000000 ((0.5470588)) 0.0000000 0.0000000
# x* \cdot (c - Ay*) -> скобки -- это ограничение двойственной задачи
mod$duals.from
# -1.680000e+02 -1.000000e+30  ((2.273737e-13)) -1.000000e+30 -1.000000e+30
mod$duals.to
# 1.38e+02 1.00e+30 ((1.00e+30)) 1.00e+30 1.00e+30
# => b_3 \in (2.273737e-13, 1.00e+30) при таких b_3 y* \equiv => 3-я Th двойственности вып-ся
# если b_3 увел-ся на 100, то \Delta z = \Delta b_3 \cdot y*_3 = 100 * 0.5470588 \approx 54.7
######
b1 <- c(0,0,800+100)
mod1 <- lp(direction = "min", objective.in = C,
const.mat = A, const.dir = constraints_direction, const.rhs = b1,
compute.sens = TRUE)
mod1$status # 0 -- success
mod1$solution # 529.4118 370.5882
mod1$objval # 492.3529 = z*_0 + \Delta z, \Delta z = \Delta b_3 \cdot y_3* =
# = 0.547 \cdot \Delta b_3 = 0.547 * 100 \approx 54.7
mod1$duals # 1.1764706 0.0000000 0.5470588 0.0000000 0.0000000
sum(mod$duals != mod1$duals) # 0 => y_3* \equiv => 3rd Theorem is applicable
mod$sens.coef.from # -0.63  0.30
mod$sens.coef.to # 9e-01 1e+30
#######
b_3 <- 800:1000
z <- NULL # вектор оптимальных значений
for (i in 1:length(b_3)){
b2 <- c(0,0,b_3[i])
mod2 <- lp(direction = "min", objective.in = C,
const.mat = A, const.dir = constraints_direction, const.rhs = b2,
compute.sens = TRUE)
z[i] <- mod2$objval
}
plot(b_3, z, type='l')
library(lpSolve)
C <- c( rep(0,8),1 )
b <- c( 20,rep(0,3),rep(10,5) )
constraints_direction <- c( rep('=',4),rep('<=',5) )
A <- matrix( c(1,0,1,0,1,1,rep(0,3),
0.3,-1,rep(0,3),1.06,-1,rep(0,2),
1,0.3,0,-1,1.2,1.06,0,-1,0,
0,1,1.75,1.4,rep(0,3),1.06,-1,
1,rep(0,8),
0,1,rep(0,7),
rep(0,2),1,rep(0,6),
rep(0,3),1,rep(0,5),
rep(0,4),1,rep(0,4)), byrow=TRUE, ncol=9, nrow=9 )
C
b
constraints_direction
A
mod <- lp(direction='max', objective.in=C,
const.mat=A, const.dir=constraints_direction, const.rhs=b,
compute.sens=TRUE)
mod$status # 0 -- success
mod$solution
# 0.0000000 10.0000000 10.0000000 10.0000000  0.5660377  9.4339623  0.0000000  3.6792453 45.4000000
mod$objval # 45.4
b1 <- c( 20+(0.1)^6,rep(0,3),rep(10,5) )
mod1 <- lp(direction='max', objective.in=C,
const.mat=A, const.dir=constraints_direction, const.rhs=b1,
compute.sens=TRUE)
mod1$status # 0 -- success
mod1$solution
# 0.0000000 10.0000000 10.0000000 10.0000000  0.5660387  9.4339623  0.0000000  3.6792465 45.4000013
mod1$objval # 45.4
####
(mod1$objval - mod$objval) * 10^6 # 1.272
#######
mod$duals
# [1]  ((1.272)) -0.140 -1.060 -1.000  0.000  1.178  0.478  0.340  0.000 -0.170  0.000  0.000  0.000  0.000
# [15]   0.000   -0.140  0.000  0.000
mod$duals.from
# [1]  ((1.943396e+01)) -1.000000e+01 -1.000000e+30 -1.000000e+30 -1.000000e+30  0.000000e+00  5.660377e-01
# [8]    0.000000e+00   -1.000000e+30 -1.315789e+01 -1.000000e+30 -1.000000e+30 -1.000000e+30 -1.000000e+30
# [15]  -1.000000e+30   -1.000000e+01 -1.000000e+30 -1.000000e+30
mod$duals.to
# [1] ((2.943396e+01)) 6.000000e-01 3.679245e+00 4.540000e+01 1.000000e+30 1.060000e+01 1.056604e+01
# [8]   1.367925e+01   1.000000e+30 7.894737e-01 1.000000e+30 1.000000e+30 1.000000e+30 1.000000e+30
# [15]  1.000000e+30   6.000000e-01 1.000000e+30 1.000000e+30
## b_1 можно менять в интервале: (1.943396e+01, 2.943396e+01) = (19.4, 29.4), чтобы y* \equiv
## => 3-я Th двойственности вып-ся: \Delta z = \Delta b_1 \cdot y*_1 = (0.1)^6 * 1.272 млн руб
## в рублях: 1.272
library(lpSolve)
C <- c( rep(0,8),1 )
b <- c( 20,rep(0,3),rep(10,5) )
constraints_direction <- c( rep('=',4),rep('<=',5) )
A <- matrix( c(1,0,1,0,1,1,rep(0,3),
0.3,-1,rep(0,3),1.06,-1,rep(0,2),
1,0.3,0,-1,1.2,0,1.06,-1,0,
0,1,1.75,1.4,rep(0,3),1.06,-1,
1,rep(0,8),
0,1,rep(0,7),
rep(0,2),1,rep(0,6),
rep(0,3),1,rep(0,5),
rep(0,4),1,rep(0,4)), byrow=TRUE, ncol=9, nrow=9 )
C
b
constraints_direction
A
mod <- lp(direction='max', objective.in=C,
const.mat=A, const.dir=constraints_direction, const.rhs=b,
compute.sens=TRUE)
mod$status # 0 -- success
mod$solution
# 0.0000000 10.0000000 10.0000000 10.0000000  0.5660377  9.4339623  0.0000000  3.6792453 45.4000000
mod$objval # 45.4
b1 <- c( 20+(0.1)^6,rep(0,3),rep(10,5) )
mod1 <- lp(direction='max', objective.in=C,
const.mat=A, const.dir=constraints_direction, const.rhs=b1,
compute.sens=TRUE)
mod1$status # 0 -- success
mod1$solution
# 0.0000000 10.0000000 10.0000000 10.0000000  0.5660387  9.4339623  0.0000000  3.6792465 45.4000013
mod1$objval # 45.4
####
(mod1$objval - mod$objval) * 10^6 # 1.272
#######
mod$duals
# [1]  ((1.272)) -0.140 -1.060 -1.000  0.000  1.178  0.478  0.340  0.000 -0.170  0.000  0.000  0.000  0.000
# [15]   0.000   -0.140  0.000  0.000
mod$duals.from
# [1]  ((1.943396e+01)) -1.000000e+01 -1.000000e+30 -1.000000e+30 -1.000000e+30  0.000000e+00  5.660377e-01
# [8]    0.000000e+00   -1.000000e+30 -1.315789e+01 -1.000000e+30 -1.000000e+30 -1.000000e+30 -1.000000e+30
# [15]  -1.000000e+30   -1.000000e+01 -1.000000e+30 -1.000000e+30
mod$duals.to
# [1] ((2.943396e+01)) 6.000000e-01 3.679245e+00 4.540000e+01 1.000000e+30 1.060000e+01 1.056604e+01
# [8]   1.367925e+01   1.000000e+30 7.894737e-01 1.000000e+30 1.000000e+30 1.000000e+30 1.000000e+30
# [15]  1.000000e+30   6.000000e-01 1.000000e+30 1.000000e+30
## b_1 можно менять в интервале: (1.943396e+01, 2.943396e+01) = (19.4, 29.4), чтобы y* \equiv
## => 3-я Th двойственности вып-ся: \Delta z = \Delta b_1 \cdot y*_1 = (0.1)^6 * 1.272 млн руб
## в рублях: 1.272
library(quadprog)
Dmat <- matrix(c(2,0,0,
0,2,0,
0,0,2), nrow = 3)
dvec <- c(0,0,0)
Amat <- matrix(c(1,1,1,
-2,1,-1), nrow = 3, byrow = TRUE)
bvec <- c(3,-5)
qp <- solve.QP(Dmat = Dmat, dvec = dvec, Amat = Amat, bvec = bvec, meq=1)
qp
# Support Vector Machines
# пакет e1071
## install.packages('e1071')
library(e1071)
head(iris,5) # будем использовать встроенный набор данных про цветочки
attach(iris) # далее всюду будет в качестве data этот набор данных
x <- subset(iris, select=-Species)
x
y <- Species # будем предсказывать вид цветка по 4 характеристикам
?svm # In SVR, the best fit line is the hyperplane that has the maximum number of points
# find a function f(x) that deviates from y_n by a value no greater than \varepsilon for each training point x
# and at the same time is as flat as possible
svm_model <- svm(Species ~ ., data=iris, cross = 10)
# автоматически ошибка будет считаться, если выбирать параметр кросс-валидации
summary(svm_model)
pred <- predict(svm_model,x)
table(pred,y)
m <- svm(Species ~ Petal.Width + Petal.Length, data=iris)
plot(m, iris, Petal.Width ~ Petal.Length, svSymbol = 4, dataSymbol = 20,
symbolPalette = rainbow(4), color.palette = cm.colors)
svm_model <- svm(Species ~ ., data=iris, cross = 10, kernel='linear')
# автоматически ошибка будет считаться, если выбирать параметр кросс-валидации
summary(svm_model)
# svm_model1 <- svm(x,y) -- или можно вот так, используя x, y
# summary(svm_model1)
# можно предсказывать классы и сравнивать, насколько хорошо мы это делаем
pred <- predict(svm_model,x)
table(pred,y)
# графики: можно поглядеть, как красивее нарисовать
m <- svm(Species ~ Petal.Width + Petal.Length, data=iris)
plot(m, iris, Petal.Width ~ Petal.Length, svSymbol = 4, dataSymbol = 20,
symbolPalette = rainbow(4), color.palette = cm.colors)
# Support Vector Machines
# пакет e1071
## install.packages('e1071')
library(e1071)
head(iris,5) # будем использовать встроенный набор данных про цветочки
attach(iris) # далее всюду будет в качестве data этот набор данных
x <- subset(iris, select=-Species)
x
y <- Species # будем предсказывать вид цветка по 4 характеристикам
?svm # In SVR, the best fit line is the hyperplane that has the maximum number of points
# find a function f(x) that deviates from y_n by a value no greater than \varepsilon for each training point x
# and at the same time is as flat as possible
svm_model <- svm(Species ~ ., data=iris, cross = 10, kernel="linear")
# автоматически ошибка будет считаться, если выбирать параметр кросс-валидации
summary(svm_model)
# svm_model1 <- svm(x,y) -- или можно вот так, используя x, y
# summary(svm_model1)
# можно предсказывать классы и сравнивать, насколько хорошо мы это делаем
pred <- predict(svm_model,x)
table(pred,y)
# графики: можно поглядеть, как красивее нарисовать
m <- svm(Species ~ Petal.Width + Petal.Length, data=iris)
plot(m, iris, Petal.Width ~ Petal.Length, svSymbol = 4, dataSymbol = 20,
symbolPalette = rainbow(4), color.palette = cm.colors)
# подберем наилучшие параметры
?tune
ctrl <- tune.control(sampling = "cross", cross = 5) # будем подбирать на основе кросс-валидации
svm_tune <- tune(svm, train.x=x, train.y=y, kernel="radial",
ranges=list(cost=seq(from = 1, to = 30, by = 1), gamma=seq(from = 0.1, to = 3, by = 0.1)),
tunecontrol = ctrl)
print(svm_tune)
tunedModel <- svm_tune$best.model
summary(tunedModel)
plot(m, iris, Petal.Width ~ Petal.Length, svSymbol = 4, dataSymbol = 20,
symbolPalette = rainbow(4), color.palette = cm.colors)
plot(m, iris, Petal.Width ~ Petal.Length, svSymbol = 4, dataSymbol = 20,
symbolPalette = rainbow(4), color.palette = cm.colors)
m <- svm(Species ~ Petal.Width + Petal.Length, data=iris, kernel='linear')
plot(m, iris, Petal.Width ~ Petal.Length, svSymbol = 4, dataSymbol = 20,
symbolPalette = rainbow(4), color.palette = cm.colors)
# подберем наилучшие параметры
?tune
install.packages('tictoc')
library(tictoc)
?tune
ctrl <- tune.control(sampling = "cross", cross = 5) # будем подбирать на основе кросс-валидации
# install.packages('tictoc')
library(tictoc)
tic()
svm_tune <- tune(svm, train.x=x, train.y=y, kernel="radial",
ranges=list(cost=seq(from = 1, to = 30, by = 1), gamma=seq(from = 0.1, to = 3, by = 0.1)),
tunecontrol = ctrl)
toc()
print(svm_tune)
tunedModel <- svm_tune$best.model
summary(tunedModel)
setwd("~/Documents/GitHub/R Projects_EF/Networks")
# install.packages("igraph")
# install.packages("igraphdata")
library(igraph)
library(igraphdata)
# как можно создать граф? (0) list of edges
g <- graph(edges = c(1,2,3,4,2,5,2,4), directed = F) # а если n = 10?
g
E(g)
V(g)
plot(g)
# присвоим вершинам и ребрам некоторые характеристики
V(g)$gender <- c("male", "male", "male", "male", "female") # set_vertex_attr
V(g)
E(g)$type <- c("friend", "family", "family", "friend")
E(g)
E(g)$weight <- c(1, 3, 3, 1) # delete_graph_attr(graph, "something") / delete_edge_attr(graph, "something")
g # посмотрим на характеристики вершин и ребер
edge_attr(g)
vertex_attr(g)
plot(g)
plot(g, vertex.color = ifelse(V(g)$gender == 'male', "orange", "dodgerblue"), edge.width = E(g)$weight)
