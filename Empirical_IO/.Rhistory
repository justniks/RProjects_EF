# функция asIgraph()
###################################################
###################################################
# введение: загрузка, визуализация, некоторые характеристики
###################################################
###################################################
# как можно создать граф? (0) list of edges
g <- graph(edges = c(1,2,3,4,2,5,2,4), directed = F) # а если n = 10?
g
# The description of an igraph object starts with up to four letters:
# D or U, for a directed or undirected graph
# N for a named graph (where nodes have a name attribute)
# W for a weighted graph (where edges have a weight attribute)
# B for a bipartite (two-mode) graph (where nodes have a type attribute)
# The two numbers that follow refer to the number of nodes and edges in the graph.
# The description also lists node & edge attributes, for example:
# (g/c) - graph-level character attribute
# (v/c) - vertex-level character attribute
# (e/n) - edge-level numeric attribute
E(g)
V(g)
plot(g)
# присвоим вершинам и ребрам некоторые характеристики
V(g)$gender <- c("male", "male", "male", "male", "female") # set_vertex_attr
E(g)$type <- c("friend", "family", "family", "friend")
E(g)$weight <- c(1, 3, 3, 1) # delete_graph_attr(graph, "something") / delete_edge_attr(graph, "something")
g # посмотрим на характеристики вершин и ребер
edge_attr(g)
vertex_attr(g)
plot(g)
plot(g, vertex.color = ifelse(V(g)$gender == 'male', "orange", "dodgerblue"), edge.width = E(g)$weight)
# ?igraph.plotting : узнаем, какие вообще есть опции при визуализации
# типы графов, которые мы смотрели на слайдах
eg <- make_empty_graph(40)
fg <- make_full_graph(40)
st <- make_star(40)
tr <- make_tree(40, children = 3, mode = "undirected")
plot()
# layout как характеристику, после чего при построении она будет фиксирована
plot(karate_grid)
plot()
plot(net_s, edge.arrow.size=.4, vertex.label=NA, vertex.size = V(net)$audience.size/4) # можно было создать характеристику V(net_s)$size <- V(net)$audience.size/4
# можно из направленного графа сделать ненаправленный
as.undirected(net_s, mode = "collapse")
net_M <- graph_from_adjacency_matrix(M)
net_M
M
# как можно создать граф? (0) list of edges
g <- graph(edges = c(1,2,3,4,2,5,2,4), directed = F) # а если n = 10?
g
E(g)
V(g)
plot(g)
# присвоим вершинам и ребрам некоторые характеристики
V(g)$gender <- c("male", "male", "male", "male", "female") # set_vertex_attr
E(g)$type <- c("friend", "family", "family", "friend")
E(g)$weight <- c(1, 3, 3, 1) # delete_graph_attr(graph, "something") / delete_edge_attr(graph, "something")
g # посмотрим на характеристики вершин и ребер
edge_attr(g)
vertex_attr(g)
plot(g)
plot(g, vertex.color = ifelse(V(g)$gender == 'male', "orange", "dodgerblue"), edge.width = E(g)$weight)
# типы графов, которые мы смотрели на слайдах
eg <- make_empty_graph(40)
fg <- make_full_graph(40)
st <- make_star(40)
tr <- make_tree(40, children = 3, mode = "undirected")
plot()
# как можно создать граф? (1) dataframe
# network of hyperlinks and mentions among news sources
nodes <- read.csv("Dataset1-Media-Example-NODES.csv", header=T)
links <- read.csv("Dataset1-Media-Example-EDGES.csv", header=T)
net <- graph_from_data_frame(d=links, vertices=nodes, directed=T)
plot(net, edge.arrow_size=.001)
# упростим граф, уберем петли, а повторные ребра суммируем через edge.attr.comb
net_s <- simplify(net, remove.multiple = T, remove.loops = T, edge.attr.comb=c(weight="sum", type="ignore") )
plot(net_s, edge.arrow.size=.4, vertex.label=NA, vertex.size = V(net)$audience.size/4) # можно было создать характеристику V(net_s)$size <- V(net)$audience.size/4
# можно из направленного графа сделать ненаправленный
as.undirected(net_s, mode = "collapse")
# как можно создать граф? (2) adjacency matrix
M <- get.adjacency(net)
M <- as_adjacency_matrix(net, attr = "weight") # суммируем вес ребер в матрице смежности
M <- as.matrix(M)
net_M <- graph_from_adjacency_matrix(M)
net_M
M
# возьмем готовые данные и визуализируем красиво: ?igraph.plotting
data(karate) # загружаем встроенный набор из пакета igraphdata
?karate
karate
vertex_attr(karate)
# присвоим двум лидерам свою фракцию, чтобы отделить их цветом на картинке
V(karate)$Faction[1] <- 3
V(karate)$Faction[34] <- 4
colrs <- c("gray50", "gold", "red", "dodgerblue") # colors() список всех цветов
V(karate)$color <- colrs[V(karate)$Faction]
vertex_attr(karate) # теперь есть характеристика color, она будет на картинке
edge_attr(karate)
plot(karate, edge.width = E(karate)$weight)
plot(karate, vertex.label=NA, edge.width = E(karate)$weight)
# Network layouts – algorithms that return coordinates for each node in a network,
# minimization of crossings between edges
plot(karate, vertex.label=NA, layout = layout_in_circle)
l <- layout_in_circle(karate)
plot(karate, vertex.label=NA, layout = layout_as_tree) # еще один не очень полезный пример
plot(karate, vertex.label=NA, layout = layout_with_fr)
plot(karate, vertex.label=NA, layout = layout_with_kk)
plot(karate, vertex.label=NA, layout = layout_with_lgl)
plot(karate, vertex.label=NA, layout = layout_nicely)
karate_grid <- add_layout_(karate, on_grid()) # к объекту-графу можно добавить
# возьмем готовые данные и визуализируем красиво: ?igraph.plotting
data(karate) # загружаем встроенный набор из пакета igraphdata
?karate
karate
vertex_attr(karate)
# присвоим двум лидерам свою фракцию, чтобы отделить их цветом на картинке
V(karate)$Faction[1] <- 3
V(karate)$Faction[34] <- 4
colrs <- c("gray50", "gold", "red", "dodgerblue") # colors() список всех цветов
V(karate)$color <- colrs[V(karate)$Faction]
vertex_attr(karate) # теперь есть характеристика color, она будет на картинке
edge_attr(karate)
plot(karate, edge.width = E(karate)$weight)
plot(karate, vertex.label=NA, edge.width = E(karate)$weight)
# Network layouts – algorithms that return coordinates for each node in a network,
# minimization of crossings between edges
plot(karate, vertex.label=NA, layout = layout_in_circle)
l <- layout_in_circle(karate)
plot(karate, vertex.label=NA, layout = layout_as_tree) # еще один не очень полезный пример
plot(karate, vertex.label=NA, layout = layout_with_fr)
plot(karate, vertex.label=NA, layout = layout_with_kk)
plot(karate, vertex.label=NA, layout = layout_with_lgl)
plot(karate, vertex.label=NA, layout = layout_nicely)
karate_grid <- add_layout_(karate, on_grid()) # к объекту-графу можно добавить
# layout как характеристику, после чего при построении она будет фиксирована
plot(karate_grid)
###################################################
# смотрим на некоторые числовые характеристики графа
# Density
# The proportion of present edges from all possible ties.
edge_density(karate)
# связность сети
igraph::components(karate) # в пакете statnet такое же название
# Diameter (longest geodesic distance) (если несколько компонент, то диаметр самой большой)
# Note that edge weights are used by default, unless set to NA.
diameter(karate)
diam <- get_diameter(karate)
diam
# рассчитаем кратчайшие пути
# Average path length
# The mean of the shortest distance between each pair of nodes in the network
# (in both directions for directed graphs).
mean_distance(karate)
# We can also find the length of all shortest paths in the graph:
distances(karate) # with edge weights
distances(karate, weights=NA) # ignore weights
distances(karate, v=V(karate)["Mr Hi"], to=V(karate)["John A"], weights=NA)
# We can also find the shortest path between specific nodes.
# Say here between Mr Hi and the John A
shortest_paths(karate,
from = V(karate)["Mr Hi"],
to  = V(karate)["John A"],
output = "both") # both path nodes and edges
shortest.paths(karate, to = V(karate)["Mr Hi"], algorithm = "dijkstra")
# We can also easily identify the immediate neighbors of a vertex.
# The 'neighbors' function finds all nodes one step out from the focal actor.
# To find the neighbors for multiple nodes, use 'adjacent_vertices()'.
neighbors(karate, V(karate)["Mr Hi"], mode="out")
# To find node neighborhoods going more than one step out, use function 'ego()'
# with parameter 'order' set to the number of steps out to go from the focal node(s).
ego(karate, order = 1, nodes = V(karate)["Mr Hi"])
g <- make_ego_graph(karate, order = 1, nodes = V(karate)["Mr Hi"])
plot(g[[1]])
# если нужно сделать подграф по какому-то признаку кроме соседства
g <- induced_subgraph(karate, vids = V(karate)$Faction == "1")
edge_density(g) / edge_density(karate) # это намного более связный граф
# можно оставлять только нужные ребра, наверное можно как-то проще это делать
edges <- ifelse(E(karate)$weight >= 3, 1, 0)*c(1:ecount(karate))
edges <- edges[-which(edges == 0)]
g <- subgraph.edges(karate,
eids = edges,
delete.vertices = FALSE)
plot(g) # видимо только подграф  самых сильно связанных вершин
###################################################
# еще немного визуализаций
# visNetwork package интерактивный пакет: http://datastorm-open.github.io/visNetwork/
# install.packages("fastmap")
library(visNetwork)
visIgraph(karate, layout = "layout_with_fr") %>%
visOptions(highlightNearest = list(enabled = T, hover = T),
nodesIdSelection = T)
# центральность по степени вершины
# сначала построим гистограмму степеней вершины
deg <- degree(karate) # which.max(deg)
# install.packages("igraph")
# install.packages("igraphdata")
library(igraph)
library(igraphdata)
# центральность по степени вершины
# сначала построим гистограмму степеней вершины
deg <- degree(karate) # which.max(deg)
plot(karate, vertex.label=NA, layout = layout_with_fr, vertex.size = deg)
hist(deg, main = "Histogram of node degree", breaks = 1:vcount(karate)-1, prob = TRUE) # degree_distribution
xfit <- seq(min(deg), max(deg), length = 40)
yfit <- dnorm(xfit, mean = mean(deg), sd = sd(deg))
lines(xfit, yfit, col = "black", lwd = 2) # а точно ли надо с нормальным законом сравнивать?
centr_degree(karate) # $res тоже самое, что хранится в deg
# центральность по близости
# Closeness (centrality based on distance to others in the graph)
# Inverse of the node's average geodesic distance to others in the network
clos <- closeness(karate, weights = NA)
plot(karate, vertex.label=NA, layout = layout_with_fr, vertex.size = clos * 1000)
centr_clo(karate) # отличаются от clos умножением на (vcount(karate)-1)
# центральность по кратчайшему пути
# Betweenness (centrality based on a broker position connecting others)
# (Number of geodesics that pass through the node or the edge)
betw <- betweenness(karate, weights = NA)
centr_betw(karate)
edge_betweenness(karate) # number of shortest paths between vertices that contain the edge, то есть это центральность для ребра
# центральность по собственному значению
# Eigenvector (centrality proportional to the sum of connection centralities)
# Values of the first eigenvector of the graph adjacency matrix
eig <- eigen_centrality(karate, weights = NA)
centr_eigen(karate)
# Page rank: http://infolab.stanford.edu/~backrub/google.html
page_rank(karate)
# объединим все центральности в одну матрицу и посмотрим корреляции
df <- data.frame (deg, clos, betw, eig$vector)
cor(df)
# модель Эрдеша-Реньи
data(karate)
p <- edge_density(karate)
g.random <- erdos.renyi.game(n = gorder(karate), p.or.m = p, type = "gnp")
# or er <- sample_gnm(n=100, m=40)
# ('n' is number of nodes, 'm' is the number of edges)
par(mfrow = c(1, 2))
plot(karate, vertex.label=NA)
plot(g.random, vertex.label=NA)
hist(degree(g.random), main = "Histogram of node degree", breaks = 1:vcount(karate)-1, prob = TRUE)
par(mfrow = c(1, 2))
hist(degree(karate), main = "Histogram of node degree", breaks = 1:vcount(karate)-1, prob = TRUE)
hist(degree(g.random), main = "Histogram of node degree", breaks = 1:vcount(karate)-1, prob = TRUE)
par(mfrow = c(1, 1))
gl <- vector('list', 1000)
m <- rep(NA, 1000)
for(i in 1:1000){
gl[[i]] <- erdos.renyi.game(n = gorder(karate), p.or.m = p, type = "gnp")
m[i] <- mean_distance(gl[[i]])
}
hist(m, xlim = range(c(min(m), 6)))
abline(v = mean_distance(karate), col = "red", lty = 3, lwd = 2)
abline(v = mean_distance(karate, weights=NA), col = "red", lty = 3, lwd = 2)
gl <- vector('list', 1000)
m <- rep(NA, 1000)
for(i in 1:1000){
gl[[i]] <- erdos.renyi.game(n = gorder(karate), p.or.m = p, type = "gnp")
m[i] <- mean_distance(gl[[i]])
}
hist(m, xlim = range(c(min(m), 6)))
abline(v = mean_distance(karate, weights=NA), col = "red", lty = 3, lwd = 2)
par(mfrow = c(1, 1))
# для случайного графа распределение степеней вершин биномиальное
gl <- vector('list', 1000)
m <- rep(NA, 1000)
for(i in 1:1000){
gl[[i]] <- erdos.renyi.game(n = gorder(karate), p.or.m = p, type = "gnp")
m[i] <- mean_distance(gl[[i]])
}
hist(m, xlim = range(c(min(m), 6)))
abline(v = mean_distance(karate, weights=NA), col = "red", lty = 3, lwd = 2)
# модель Watts-Strogatz
# Watts-Strogatz small-world graph
# Creates a lattice with 'dim' dimensions of 'size' nodes each, and rewires edges
# randomly with probability 'p'. You can allow 'loops' and 'multiple' edges.
# The neighborhood in which edges are connected is 'nei'.
g.WS <- sample_smallworld(dim = 1, size = gorder(karate), nei = 3, p = 0.05)
plot(g.WS, vertex.label=NA, layout = layout_in_circle, vertex.size = 5)
# модель Барабаши-Альберта
# Barabasi-Albert preferential attachment model for scale-free graphs
# 'n' is number of nodes, 'power' is the power of attachment (1 is linear)
# 'm' is the number of edges added on each time step
g.BA <- sample_pa(n = gorder(karate), power = 1, directed = FALSE)
hist(degree(g.BA), main = "Histogram of node degree", breaks = 1:vcount(karate)-1, prob = TRUE)
# у karate мало вершин, посмотрим на степенной закон для 500 вершин
g <- sample_pa(500, power = 1, directed = FALSE)
plot(g, vertex.label=NA, vertex.size = 2)
plot(degree.distribution(g))
plot(degree.distribution(g), log='xy') # в логарифмах линейная функция
# в 25% случаев новый узел вообще не будет соединен ни с одним узлом (т. е. будет изолированным),
# в 50% случаев он будет соединен с одним узлом, в 25% случаев – с двумя узлами
# параметр out.dist
g <- sample_pa(500, out.dist = c(0.25, 0.5, 0.25), directed = FALSE, zero.appeal = 1)
plot(g, vertex.label=NA, vertex.size = degree(g)/2)
plot(degree.distribution(g))
plot(degree.distribution(g), log='xy') # уже не совсем линейная функция
data(karate)
p <- edge_density(karate)
assortativity_degree(karate)
vertex_attr(karate) # если фракция только 1 или 2, то это одинаковые корреляции будут
assortativity_nominal(karate, types = V(karate)$Faction)
assortativity(karate, types1 = V(karate)$Faction)
gl <- vector('list', 1000)
m <- rep(NA, 1000)
for(i in 1:1000){
gl[[i]] <- erdos.renyi.game(n = gorder(karate), p.or.m = p, type = "gnp")
m[i] <- assortativity(gl[[i]], types1 = sample(V(karate)$Faction))
}
hist(m, xlim = range(c(-1, 1)))
hist(m, xlim = range(c(-0.5, 0.5)))
abline(v = assortativity(karate, types1 = V(karate)$Faction), col = "red", lty = 3, lwd = 2)
abline(v = assortativity(karate, types1 = V(karate)$Faction), col = "red", lty = 3, lwd = 2)
gl <- vector('list', 1000)
m <- rep(NA, 1000)
for(i in 1:1000){
gl[[i]] <- erdos.renyi.game(n = gorder(karate), p.or.m = p, type = "gnp")
m[i] <- assortativity(gl[[i]], types1 = sample(V(karate)$Faction))
}
hist(m, xlim = range(c(-1, 1)))
abline(v = assortativity(karate, types1 = V(karate)$Faction), col = "red", lty = 3, lwd = 2)
USairport.n500.net
data(package="igraphdata")
data(USairport.n500.net)
USairport.n500.net
data(USairports)
USairports
data(package="tnet")
install.packages('tnet')
library(tnet)
data(package="tnet")
USairport.n500.net
data(USairport.n500.net)
data(USairport.n500.net)
# data(USairport.n500.net)
data <- USairport.n500.net
View(data)
?USairport.n500.net
?OnlineSocialNetwork.n1899.lnet
library(igraph)
install.packages('networkdata')
library(networkdata)
install.packages('networkdata')
install.packages("drat")
drat::addRepo("schochastics")
install.packages("networkdata")
library(networkdata)
?networkdata
data(package = "networkdata")
covert_18
?covert_18
data1 <- covert_18
View(data1)
plot(data1, edge.width = E(data1)$weight)
plot(data1, vertex.label=NA, edge.width = E(data1)$weight)
library(igraph)
library(igraphdata)
plot(data1, edge.width = E(data1)$weight)
library(intergraph)
install.packages('intergraph')
library(intergraph)
plot(data1, edge.width = E(data1)$weight)
plot(data1)
plot(cars)
setwd("~/Documents/GitHub/RProjects_EF/Empirical_IO")
## Есть продуктовые, временные и географические границы
data <- read_csv('Cereal_dataset.csv')
## Есть продуктовые, временные и географические границы
data <- read_csv('Cereal_dataset.csv')
setwd("~/Documents/GitHub/RProjects_EF/Empirical_IO")
## Есть продуктовые, временные и географические границы
data <- read_csv('Cereal_dataset.csv')
## Есть продуктовые, временные и географические границы
data <- read.csv('Cereal_dataset.csv')
view(data)
View(data)
data$'market_size' <- data$'city_population'
data$'market_share' <- data$'servings_sold' / data$'market_size'
summary(data$'market_share')
data <- data %>%
group_by(market_ids) %>%
mutate(outside_share = 1 - sum(market_share))
library('magrittr')
library('dplyr')
data <- data %>%
group_by(market_ids) %>%
mutate(outside_share = 1 - sum(market_share))
summary(data[, c('market_share', 'outside_share')])
data$'market_size' <- data$'city_population' * 91
data$'market_share' <- data$'servings_sold' / data$'market_size'
summary(data$'market_share') # >1 => люди потребляют >1 пачки на харю
data <- data %>%
group_by(market_ids) %>%
mutate(outside_share = 1 - sum(market_share))
summary(data[, c('market_share', 'outside_share')])
###
data$'logit_delta' <- log(data$'market_share' / data$'outide_share')
m1 <- lm(logit_delta - price_per_serving + mushy + sugar, data=data)
###
data$'logit_delta' <- log(data$'market_share' / data$'outside_share')
m1 <- lm(logit_delta - price_per_serving + mushy + sugar, data=data)
summary(m1)
m1 = lm(logit_delta - price_per_serving + mushy + sugar, data=data)
m1 <- lm(logit_delta ~ price_per_serving + mushy + sugar, data=data)
summary(m1)
m2_1 <- lm(logit_delta ~ price_per_serving + mushy + sugar +
as.factor(market_ids) + as.factor(product_ids), data=data)
summary(m2_1)
library('ivreg')
library('ivreg')
library('stargazer')
m3 <- ivreg(logit_delta ~ price_per_serving + mushy + sugar | price_instrument +
+ mushy + sugar, data=data)
summary(m3)
stargazer(m1, m2_1, m3)
stargazer(m1, m2_1, m3, type='text')
### инструменты Хаусмана (посмотреть на цены на др. рынках)
for (i in 1:nrows(data)){
subdf <- data %>%
filter(city != data$city[i]) %>%
filter(quarter == data$quarter[i]) %>%
filter(product_ids == data$product_ids[i])
data$hausman[i] <- mean(subdf$price_per_serving)
}
### инструменты Хаусмана (посмотреть на цены на др. рынках)
for (i in 1:nrow(data)){
subdf <- data %>%
filter(city != data$city[i]) %>%
filter(quarter == data$quarter[i]) %>%
filter(product_ids == data$product_ids[i])
data$hausman[i] <- mean(subdf$price_per_serving)
}
m4 <- ivreg(logit_delta ~ price_per_serving + mushy +
sugar | hausman + mushy + sugar, data=data)
summary(m4)
library('ggplot2')
ggplot(data, aes(x=data$price_per_serving, y=data$price_instrument)) + geom_point()
ggplot(data, aes(x=data$price_per_serving, y=data$hausman)) + geom_point()
library(dplyr)
library(ggplot2)
library(frontier)
library(readxl)
library(dplyr)
library(frontier)
library(ggplot2)
library(readxl)
data("riceProdPhil")
textile <- read_xlsx('textile.xlsx')
riceProdPhil %>%
ggplot(aes(PROD)) + geom_density()
riceProdPhil %>%
ggplot( aes(log(PROD)) ) + geom_density()
riceProdPhil %>%
ggplot( aes(LABOR) ) + geom_density()
riceProdPhil %>%
ggplot( aes(log(LABOR)) ) + geom_density()
riceProdPhil %>%
ggplot( aes(NPK) ) + geom_histogram()
riceProdPhil %>%
ggplot( aes(log(NPK)) ) + geom_histogram()
m0 <- lm( log(PROD) ~ log(AREA), data=riceProdPhil )
summary(m0)
riceProdPhil %>%
ggplot( aes(x=AREA, y=PROD) ) + geom_point() + geom_smooth(method='lm')
+ geom_function(fun=function(x) m0$coefficients[1] + m0$coefficients[2] * log(x))
riceProdPhil %>%
ggplot( aes(x=AREA, y=PROD) ) + geom_point() + geom_function(fun=function(x) m0$coefficients[1] + m0$coefficients[2] * log(x))
riceProdPhil %>%
ggplot( aes(x=AREA, y=PROD) ) + geom_point() + exp(geom_function(fun=function(x) m0$coefficients[1] + m0$coefficients[2] * log(x)))
riceProdPhil %>%
ggplot( aes(x=AREA, y=PROD) ) + geom_point() + geom_function(fun=function(x) exp(m0$coefficients[1] + m0$coefficients[2] * log(x)))
m1 <- lm(log(PROD) ~ log(AREA) + log(LABOR) + log(NPK), data=riceProdPhil)
summary(m1)
m1$residuals %>% hist()
m2 <- sfa(log(PROD) ~ log(AREA) + log(LABOR) + log(NPK), data=riceProdPhil, ineffDecrease=T)
summary(m2)
summary(m2, extraPar=T)
m2$mleParam[2] + m2$mleParam[33] + m2$mleParam[4]
m2$mleParam[2] + m2$mleParam[3] + m2$mleParam[4]
m2_1 <- sfa(log(PROD) ~ log(AREA), data=riceProdPhil, ineffDecrease=T)
summary(m2_1)
riceProdPhil %>%
ggplot (aes(x=AREA, y=PROD) ) + geom_point() + geom_function(fun=function(x) exp(m2_1$olsParam[1] + m2_1$olsParam[2] * log(x)))
+ geom_function(fun=function(x) exp(m2_1$olsParam[1] + m2_1$olsParam[2] * log(x)))
+ geom_function(fun=function(x) exp(m2_1$olsParam[1] + m2_1$olsParam[2] * log(x)))
riceProdPhil %>%
ggplot (aes(x=AREA, y=PROD) ) + geom_point() \
riceProdPhil %>%
ggplot (aes(x=AREA, y=PROD) ) + geom_point() +
geom_function(fun=function(x) exp(m2_1$olsParam[1] + m2_1$olsParam[2] * log(x)))
riceProdPhil %>%
ggplot (aes(x=AREA, y=PROD) ) + geom_point() +
geom_function(fun=function(x) exp(m2_1$olsParam[1] + m2_1$olsParam[2] * log(x)), col='red') +
geom_function(fun=function(x) exp(m2$coefficients[1] + m2$coefficients[2] * log(x)), col='blue')
riceProdPhil %>%
ggplot (aes(x=AREA, y=PROD) ) + geom_point() +
geom_function(fun=function(x) exp(m2_1$olsParam[1] + m2_1$olsParam[2] * log(x)), col='red') +
geom_function(fun=function(x) exp(m2$mleParam[1] + m2$mleParam[2] * log(x)), col='blue')
riceProdPhil %>%
ggplot (aes(x=AREA, y=PROD) ) + geom_point() +
geom_function(fun=function(x) exp(m2_1$olsParam[1] + m2_1$olsParam[2] * log(x)), col='red') +
geom_function(fun=function(x) exp(m2_1$mleParam[1] + m2_1$mleParam[2] * log(x)), col='blue')
efficiencies(m2) %>% hist()
riceProdPhil %>% ggplot(aes(eff.sfa, col=factor(YEARDUM)) + geom_density()
riceProdPhil$eff.sfa <- efficiencies(m2)
riceProdPhil %>% ggplot(aes(eff.sfa, col=factor(YEARDUM)) + geom_density()
riceProdPhil %>% ggplot(aes(eff.sfa, col=factor(YEARDUM))) + geom_density()
riceProdPhil$eff.sfa <- efficiencies(m2)
View(riceProdPhil)
View(riceProdPhil)
m2 <- sfa(log(PROD) ~ log(AREA) + log(LABOR) + log(NPK), data=riceProdPhil, ineffDecrease=T)
efficiencies(m2) %>% hist()
riceProdPhil$eff.sfa <- efficiencies(m2)
riceProdPhil %>% ggplot( aes(eff.sfa, col=factor(YEARDUM)) ) + geom_density()
