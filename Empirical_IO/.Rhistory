?karate
karate
vertex_attr(karate)
# присвоим двум лидерам свою фракцию, чтобы отделить их цветом на картинке
V(karate)$Faction[1] <- 3
V(karate)$Faction[34] <- 4
colrs <- c("gray50", "gold", "red", "dodgerblue") # colors() список всех цветов
V(karate)$color <- colrs[V(karate)$Faction]
vertex_attr(karate) # теперь есть характеристика color, она будет на картинке
edge_attr(karate)
plot(karate, edge.width = E(karate)$weight)
plot(karate, vertex.label=NA, edge.width = E(karate)$weight)
# Network layouts – algorithms that return coordinates for each node in a network,
# minimization of crossings between edges
plot(karate, vertex.label=NA, layout = layout_in_circle)
l <- layout_in_circle(karate)
plot(karate, vertex.label=NA, layout = layout_as_tree) # еще один не очень полезный пример
plot(karate, vertex.label=NA, layout = layout_with_fr)
plot(karate, vertex.label=NA, layout = layout_with_kk)
plot(karate, vertex.label=NA, layout = layout_with_lgl)
plot(karate, vertex.label=NA, layout = layout_nicely)
karate_grid <- add_layout_(karate, on_grid()) # к объекту-графу можно добавить
# возьмем готовые данные и визуализируем красиво: ?igraph.plotting
data(karate) # загружаем встроенный набор из пакета igraphdata
?karate
karate
vertex_attr(karate)
# присвоим двум лидерам свою фракцию, чтобы отделить их цветом на картинке
V(karate)$Faction[1] <- 3
V(karate)$Faction[34] <- 4
colrs <- c("gray50", "gold", "red", "dodgerblue") # colors() список всех цветов
V(karate)$color <- colrs[V(karate)$Faction]
vertex_attr(karate) # теперь есть характеристика color, она будет на картинке
edge_attr(karate)
plot(karate, edge.width = E(karate)$weight)
plot(karate, vertex.label=NA, edge.width = E(karate)$weight)
# Network layouts – algorithms that return coordinates for each node in a network,
# minimization of crossings between edges
plot(karate, vertex.label=NA, layout = layout_in_circle)
l <- layout_in_circle(karate)
plot(karate, vertex.label=NA, layout = layout_as_tree) # еще один не очень полезный пример
plot(karate, vertex.label=NA, layout = layout_with_fr)
plot(karate, vertex.label=NA, layout = layout_with_kk)
plot(karate, vertex.label=NA, layout = layout_with_lgl)
plot(karate, vertex.label=NA, layout = layout_nicely)
karate_grid <- add_layout_(karate, on_grid()) # к объекту-графу можно добавить
# layout как характеристику, после чего при построении она будет фиксирована
plot(karate_grid)
###################################################
# смотрим на некоторые числовые характеристики графа
# Density
# The proportion of present edges from all possible ties.
edge_density(karate)
# связность сети
igraph::components(karate) # в пакете statnet такое же название
# Diameter (longest geodesic distance) (если несколько компонент, то диаметр самой большой)
# Note that edge weights are used by default, unless set to NA.
diameter(karate)
diam <- get_diameter(karate)
diam
# рассчитаем кратчайшие пути
# Average path length
# The mean of the shortest distance between each pair of nodes in the network
# (in both directions for directed graphs).
mean_distance(karate)
# We can also find the length of all shortest paths in the graph:
distances(karate) # with edge weights
distances(karate, weights=NA) # ignore weights
distances(karate, v=V(karate)["Mr Hi"], to=V(karate)["John A"], weights=NA)
# We can also find the shortest path between specific nodes.
# Say here between Mr Hi and the John A
shortest_paths(karate,
from = V(karate)["Mr Hi"],
to  = V(karate)["John A"],
output = "both") # both path nodes and edges
shortest.paths(karate, to = V(karate)["Mr Hi"], algorithm = "dijkstra")
# We can also easily identify the immediate neighbors of a vertex.
# The 'neighbors' function finds all nodes one step out from the focal actor.
# To find the neighbors for multiple nodes, use 'adjacent_vertices()'.
neighbors(karate, V(karate)["Mr Hi"], mode="out")
# To find node neighborhoods going more than one step out, use function 'ego()'
# with parameter 'order' set to the number of steps out to go from the focal node(s).
ego(karate, order = 1, nodes = V(karate)["Mr Hi"])
g <- make_ego_graph(karate, order = 1, nodes = V(karate)["Mr Hi"])
plot(g[[1]])
# если нужно сделать подграф по какому-то признаку кроме соседства
g <- induced_subgraph(karate, vids = V(karate)$Faction == "1")
edge_density(g) / edge_density(karate) # это намного более связный граф
# можно оставлять только нужные ребра, наверное можно как-то проще это делать
edges <- ifelse(E(karate)$weight >= 3, 1, 0)*c(1:ecount(karate))
edges <- edges[-which(edges == 0)]
g <- subgraph.edges(karate,
eids = edges,
delete.vertices = FALSE)
plot(g) # видимо только подграф  самых сильно связанных вершин
###################################################
# еще немного визуализаций
# visNetwork package интерактивный пакет: http://datastorm-open.github.io/visNetwork/
# install.packages("fastmap")
library(visNetwork)
visIgraph(karate, layout = "layout_with_fr") %>%
visOptions(highlightNearest = list(enabled = T, hover = T),
nodesIdSelection = T)
# центральность по степени вершины
# сначала построим гистограмму степеней вершины
deg <- degree(karate) # which.max(deg)
# install.packages("igraph")
# install.packages("igraphdata")
library(igraph)
library(igraphdata)
# центральность по степени вершины
# сначала построим гистограмму степеней вершины
deg <- degree(karate) # which.max(deg)
plot(karate, vertex.label=NA, layout = layout_with_fr, vertex.size = deg)
hist(deg, main = "Histogram of node degree", breaks = 1:vcount(karate)-1, prob = TRUE) # degree_distribution
xfit <- seq(min(deg), max(deg), length = 40)
yfit <- dnorm(xfit, mean = mean(deg), sd = sd(deg))
lines(xfit, yfit, col = "black", lwd = 2) # а точно ли надо с нормальным законом сравнивать?
centr_degree(karate) # $res тоже самое, что хранится в deg
# центральность по близости
# Closeness (centrality based on distance to others in the graph)
# Inverse of the node's average geodesic distance to others in the network
clos <- closeness(karate, weights = NA)
plot(karate, vertex.label=NA, layout = layout_with_fr, vertex.size = clos * 1000)
centr_clo(karate) # отличаются от clos умножением на (vcount(karate)-1)
# центральность по кратчайшему пути
# Betweenness (centrality based on a broker position connecting others)
# (Number of geodesics that pass through the node or the edge)
betw <- betweenness(karate, weights = NA)
centr_betw(karate)
edge_betweenness(karate) # number of shortest paths between vertices that contain the edge, то есть это центральность для ребра
# центральность по собственному значению
# Eigenvector (centrality proportional to the sum of connection centralities)
# Values of the first eigenvector of the graph adjacency matrix
eig <- eigen_centrality(karate, weights = NA)
centr_eigen(karate)
# Page rank: http://infolab.stanford.edu/~backrub/google.html
page_rank(karate)
# объединим все центральности в одну матрицу и посмотрим корреляции
df <- data.frame (deg, clos, betw, eig$vector)
cor(df)
# модель Эрдеша-Реньи
data(karate)
p <- edge_density(karate)
g.random <- erdos.renyi.game(n = gorder(karate), p.or.m = p, type = "gnp")
# or er <- sample_gnm(n=100, m=40)
# ('n' is number of nodes, 'm' is the number of edges)
par(mfrow = c(1, 2))
plot(karate, vertex.label=NA)
plot(g.random, vertex.label=NA)
hist(degree(g.random), main = "Histogram of node degree", breaks = 1:vcount(karate)-1, prob = TRUE)
par(mfrow = c(1, 2))
hist(degree(karate), main = "Histogram of node degree", breaks = 1:vcount(karate)-1, prob = TRUE)
hist(degree(g.random), main = "Histogram of node degree", breaks = 1:vcount(karate)-1, prob = TRUE)
par(mfrow = c(1, 1))
gl <- vector('list', 1000)
m <- rep(NA, 1000)
for(i in 1:1000){
gl[[i]] <- erdos.renyi.game(n = gorder(karate), p.or.m = p, type = "gnp")
m[i] <- mean_distance(gl[[i]])
}
hist(m, xlim = range(c(min(m), 6)))
abline(v = mean_distance(karate), col = "red", lty = 3, lwd = 2)
abline(v = mean_distance(karate, weights=NA), col = "red", lty = 3, lwd = 2)
gl <- vector('list', 1000)
m <- rep(NA, 1000)
for(i in 1:1000){
gl[[i]] <- erdos.renyi.game(n = gorder(karate), p.or.m = p, type = "gnp")
m[i] <- mean_distance(gl[[i]])
}
hist(m, xlim = range(c(min(m), 6)))
abline(v = mean_distance(karate, weights=NA), col = "red", lty = 3, lwd = 2)
par(mfrow = c(1, 1))
# для случайного графа распределение степеней вершин биномиальное
gl <- vector('list', 1000)
m <- rep(NA, 1000)
for(i in 1:1000){
gl[[i]] <- erdos.renyi.game(n = gorder(karate), p.or.m = p, type = "gnp")
m[i] <- mean_distance(gl[[i]])
}
hist(m, xlim = range(c(min(m), 6)))
abline(v = mean_distance(karate, weights=NA), col = "red", lty = 3, lwd = 2)
# модель Watts-Strogatz
# Watts-Strogatz small-world graph
# Creates a lattice with 'dim' dimensions of 'size' nodes each, and rewires edges
# randomly with probability 'p'. You can allow 'loops' and 'multiple' edges.
# The neighborhood in which edges are connected is 'nei'.
g.WS <- sample_smallworld(dim = 1, size = gorder(karate), nei = 3, p = 0.05)
plot(g.WS, vertex.label=NA, layout = layout_in_circle, vertex.size = 5)
# модель Барабаши-Альберта
# Barabasi-Albert preferential attachment model for scale-free graphs
# 'n' is number of nodes, 'power' is the power of attachment (1 is linear)
# 'm' is the number of edges added on each time step
g.BA <- sample_pa(n = gorder(karate), power = 1, directed = FALSE)
hist(degree(g.BA), main = "Histogram of node degree", breaks = 1:vcount(karate)-1, prob = TRUE)
# у karate мало вершин, посмотрим на степенной закон для 500 вершин
g <- sample_pa(500, power = 1, directed = FALSE)
plot(g, vertex.label=NA, vertex.size = 2)
plot(degree.distribution(g))
plot(degree.distribution(g), log='xy') # в логарифмах линейная функция
# в 25% случаев новый узел вообще не будет соединен ни с одним узлом (т. е. будет изолированным),
# в 50% случаев он будет соединен с одним узлом, в 25% случаев – с двумя узлами
# параметр out.dist
g <- sample_pa(500, out.dist = c(0.25, 0.5, 0.25), directed = FALSE, zero.appeal = 1)
plot(g, vertex.label=NA, vertex.size = degree(g)/2)
plot(degree.distribution(g))
plot(degree.distribution(g), log='xy') # уже не совсем линейная функция
data(karate)
p <- edge_density(karate)
assortativity_degree(karate)
vertex_attr(karate) # если фракция только 1 или 2, то это одинаковые корреляции будут
assortativity_nominal(karate, types = V(karate)$Faction)
assortativity(karate, types1 = V(karate)$Faction)
gl <- vector('list', 1000)
m <- rep(NA, 1000)
for(i in 1:1000){
gl[[i]] <- erdos.renyi.game(n = gorder(karate), p.or.m = p, type = "gnp")
m[i] <- assortativity(gl[[i]], types1 = sample(V(karate)$Faction))
}
hist(m, xlim = range(c(-1, 1)))
hist(m, xlim = range(c(-0.5, 0.5)))
abline(v = assortativity(karate, types1 = V(karate)$Faction), col = "red", lty = 3, lwd = 2)
abline(v = assortativity(karate, types1 = V(karate)$Faction), col = "red", lty = 3, lwd = 2)
gl <- vector('list', 1000)
m <- rep(NA, 1000)
for(i in 1:1000){
gl[[i]] <- erdos.renyi.game(n = gorder(karate), p.or.m = p, type = "gnp")
m[i] <- assortativity(gl[[i]], types1 = sample(V(karate)$Faction))
}
hist(m, xlim = range(c(-1, 1)))
abline(v = assortativity(karate, types1 = V(karate)$Faction), col = "red", lty = 3, lwd = 2)
USairport.n500.net
data(package="igraphdata")
data(USairport.n500.net)
USairport.n500.net
data(USairports)
USairports
data(package="tnet")
install.packages('tnet')
library(tnet)
data(package="tnet")
USairport.n500.net
data(USairport.n500.net)
data(USairport.n500.net)
# data(USairport.n500.net)
data <- USairport.n500.net
View(data)
?USairport.n500.net
?OnlineSocialNetwork.n1899.lnet
library(igraph)
install.packages('networkdata')
library(networkdata)
install.packages('networkdata')
install.packages("drat")
drat::addRepo("schochastics")
install.packages("networkdata")
library(networkdata)
?networkdata
data(package = "networkdata")
covert_18
?covert_18
data1 <- covert_18
View(data1)
plot(data1, edge.width = E(data1)$weight)
plot(data1, vertex.label=NA, edge.width = E(data1)$weight)
library(igraph)
library(igraphdata)
plot(data1, edge.width = E(data1)$weight)
library(intergraph)
install.packages('intergraph')
library(intergraph)
plot(data1, edge.width = E(data1)$weight)
plot(data1)
plot(cars)
# remove.packages('seasonal')
# install.packages('seasonal')
# install.packages('x13binary', dependencies=TRUE)
library(seasonal)
data <- read.csv('Total_mrtg_vol_sec.csv')
set.seed(123)
df <- data.frame(
y = rnorm(100),
x1 = rnorm(100),
x2 = rnorm(100),
z1 = rnorm(100),
z2 = rnorm(100)
)
# feols example
library(fixest)
feols_model <- feols(y ~ x1 + x2 | x1 ~ z1 | x2 ~ z2, data = df)
# felm example
library(lfe)
felm_model <- felm(y ~ 1 | 0 | (x1 | x2 ~ z1 | z2), data = df)
felm_model <- felm(y ~ x1 + x2 | 0 | (x1 ~ z1) + (x2 ~ z2), data = df)
felm_model <- felm(y ~ x1 + x2 | 0 | (x1 ~ z1) + (x2 ~ z2), data = df)
summary(felm_model)
setwd("/Users/nikitasysoev/Documents/GitHub/RProjects_EF/Empirical_IO")
library(tidyverse)
library(ggplot2)
df <- read.csv('BR91-DENTS.csv')
head(df)
library(readxl)
df <- read_xlsx('BR91-DENTS.xlsx')
head(df)
df <- read_xlsx('HW-2/BR91-DENTS.xlsx')
head(df)
a <- cut(df$TPOP, c(seq(0, 8, by=1), Inf))
df$TPOP_cut <- a
a <- df %>%
group_by(TPOP_cut, DENTS) %>%
summarise(n = n())
a
ggplot( a, aes(x=TPOP_cut, y=n, fill=DENTS)) +
geom_bar( position="stack", stat="identity" )
hist(df$DENTS)
ggplot(df, aes(x=DENTS)) +
geom_histogram(aes(y=count))
ggplot(df, aes(x=DENTS)) +
geom_histogram(aes(y=count(DENTS)))
hist(df$DENTS)
hist(df$DENTS, breaks=17)
hist(df$DENTS, breaks=17, xlim=c(0,17))
hist(df$DENTS, breaks=18, xlim=c(0,17))
hist(df$DENTS, breaks=0:17, xlim=c(0,17))
summary(df$DENTS)
table(df$DENTS)
median( table(df$DENTS) )
median( df$DENTS )
View(df)
View(df)
corr(df$DENTS, df$TPOP)
cor(df$DENTS, df$TPOP)
cor(df$DENTS, df$BIRTHS)
cor(df$DENTS, df$ELD)
res <- lm(
DENTS ~ TPOP + OPOP + NGRW + PGRW + OCTY + BIRTHS + ELD + PINC + LNHDD + LANDV,
data=df)
summary(res)
library(stargazer)
stargazer(res)
res1 <- lm(
log(DENTS) ~ log(TPOP) + log(OPOP) + log(NGRW) + log(PGRW) + log(OCTY) + log(BIRTHS) + log(ELD) + log(PINC) + LNHDD + log(LANDV),
data=df)
res1 <- lm(
DENTS ~ TPOP + OPOP + NGRW + PGRW + OCTY + BIRTHS + ELD + PINC + exp(LNHDD) + LANDV,
data=df)
summary(res1)
stargazer(res1)
# 4 Ordered logit / probit
# install.packages('MASS')
library(MASS)
res_logit <- polr(
formula = as.factor(DENTS_F) ~ TPOP + OPOP + NGRW + PGRW + OCTY + BIRTHS + ELD + PINC + LNHDD + LANDV,
data=df,
method=c('logistic'),
Hess=T
)
summary(res_logit)
stargazer(res_logit)
res_probit <- polr(
formula = as.factor(DENTS_F) ~ TPOP + OPOP + NGRW + PGRW + OCTY + BIRTHS + ELD + PINC + LNHDD + LANDV,
data=df,
method=c('probit'),
Hess=T
)
summary(res_probit)
res_probit <- polr(
formula = as.factor(DENTS_F) ~ TPOP + OPOP + NGRW + PGRW + OCTY + BIRTHS + ELD + PINC + LNHDD + LANDV,
data=df,
method=c('probit'),
Hess=T
)
summary(res_probit)
plot(df$TPOP)
plot(df$DENTS)
plot(df$OPOP)
plot(df$NGRW)
plot(df$PGRW)
plot(df$OCTY)
plot(df$BIRTHS)
plot(df$ELD)
plot(df$PINC)
plot(df$LNHDD)
plot(df$LANDV)
df_noout <- subset(
data, data$BIRTHS < 5000
)
df_noout <- subset(
data, data$BIRTHS < 5000
)
df_noout <- subset(
df, df$BIRTHS < 5000
)
plot(df_noout$BIRTHS)
plot(df$LANDV)
plot(df$LNHDD)
plot(df$PINC)
plot(df$ELD)
plot(df$BIRTHS)
plot(df_noout$BIRTHS)
plot(df$OCTY)
df_noout <- subset(
df_noout, df_noout$OCTY < 8
)
plot(df_noout$OCTY)
plot(df$PGRW)
plot(df$NGRW)
plot(df$OPOP)
plot(df$DENTS)
plot(df$TPOP)
df_noout <- subset(
df_noout, df_noout$TPOP < 30
)
plot(df_noout$TPOP)
plot(df$OPOP)
plot(df$NGRW)
df_noout <- subset(
df_noout, df_noout$DENTS <= 15
)
plot(df_noout$DENTS)
df_noout <- subset(
df_noout, df_noout$OPOP <= 4
)
plot(df_noout$OPOP)
dim(df_noout)
dim(df)
df_noout <- subset(
df_noout, df_noout$OPOP <= 3
)
plot(df_noout$OPOP)
dim(df_noout)
dim(df)
plot(df_noout$TPOP)
plot(df_noout$DENTS)
plot(df_noout$OPOP)
plot(df_noout$NGRW)
plot(df_noout$PGRW)
plot(df_noout$OCTY)
df_noout <- subset(
df, df$BIRTHS < 2
)
plot(df_noout$BIRTHS)
df_noout <- subset(
df_noout, df_noout$BIRTHS < 2
)
plot(df_noout$BIRTHS)
dim(df_noout)
dim(df)
df_noout <- subset(
df, df$BIRTHS < 5000
)
plot(df_noout$BIRTHS)
df_noout <- subset(
df_noout, df_noout$OCTY < 8
)
plot(df_noout$OCTY)
df_noout <- subset(
df_noout, df_noout$TPOP < 30
)
plot(df_noout$TPOP)
df_noout <- subset(
df_noout, df_noout$DENTS <= 15
)
plot(df_noout$DENTS)
df_noout <- subset(
df_noout, df_noout$OPOP <= 3
)
plot(df_noout$OPOP)
dim(df_noout)
dim(df)
a <- cut(df_noout$TPOP, c(seq(0, 8, by=1), Inf))
df_noout$TPOP_cut <- a
a <- df_noout %>%
group_by(TPOP_cut, DENTS) %>%
summarise(n = n())
a
ggplot( a, aes(x=TPOP_cut, y=n, fill=DENTS)) +
geom_bar( position="stack", stat="identity" )
hist(df_noout$DENTS, breaks=0:15, xlim=c(0,15))
table(df_noout$DENTS)
median( df_noout$DENTS ) # 2
cor(df_noout$DENTS, df_noout$TPOP) # 0.8598786
cor(df_noout$DENTS, df_noout$BIRTHS) # 0.1563089
cor(df_noout$DENTS, df_noout$ELD) # -0.2604731
res2 <- lm(
DENTS ~ TPOP + OPOP + NGRW + PGRW + OCTY + BIRTHS + ELD + PINC + LNHDD + LANDV,
data=df_noout)
summary(res2)
stargazer(res2)
res1_logit <- polr(
formula = as.factor(DENTS_F) ~ TPOP + OPOP + NGRW + PGRW + OCTY + BIRTHS + ELD + PINC + LNHDD + LANDV,
data=df_noout,
method=c('logistic'),
Hess=T
)
summary(res1_logit)
stargazer(res1_logit)
res_probit <- polr(
formula = as.factor(DENTS_F) ~ TPOP + OPOP + NGRW + PGRW + OCTY + BIRTHS + ELD + PINC + LNHDD + LANDV,
data=df,
method=c('probit'),
Hess=T
)
summary(res_probit)
res1_probit <- polr(
formula = as.factor(DENTS_F) ~ TPOP + OPOP + NGRW + PGRW + OCTY + BIRTHS + ELD + PINC + LNHDD + LANDV,
data=df_noout,
method=c('probit'),
Hess=T
)
summary(res1_probit)
stargazer(res1_probit)
